{"version":3,"sources":["logo.png","Components/Header.jsx","Components/Editor.jsx","Components/Screen.jsx","Components/Footer.jsx","Components/Main.jsx","App.js","data.js","serviceWorker.js","index.js"],"names":["module","exports","Header","headerText","handleClick","className","src","logo","alt","aria-hidden","id","onClick","Editor","innerText","handleChange","name","cols","rows","value","onChange","Screen","textResult","dangerouslySetInnerHTML","Footer","href","target","rel","Main","textContent","App","useState","text","setText","e","__html","marked","sanatize","breaks","gfm","parentNode","classList","toggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,kC,wJCe5BC,EAZA,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,WAAWC,EAAiB,EAAjBA,YACxB,OACI,gCACI,yBAAKC,UAAY,kBACb,yBAAKC,IAAKC,IAAMC,IAAI,UAE5B,4BAAKL,GACL,uBAAGE,UAAU,mBAAmBI,cAAY,OAAOC,GAAG,cAAcC,QAAWP,MCExEQ,EATA,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,UAAUC,EAA8B,EAA9BA,aAAaV,EAAiB,EAAjBA,YACpC,OACI,yBAAKC,UAAY,kBAAkBK,GAAG,qBAClC,kBAAC,EAAD,CAAQP,WAAa,SAASC,YAAeA,IAC7C,8BAAUW,KAAK,SAASL,GAAG,SAASM,KAAK,KAAKC,KAAK,KAAKC,MAASL,EAAWM,SAAYL,MCMrFM,EATA,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,WAAWjB,EAAiB,EAAjBA,YACxB,OACI,yBAAKC,UAAY,kBAAkBK,GAAG,qBAClC,kBAAC,EAAD,CAAQP,WAAa,YAAYC,YAAeA,IAChD,yBAAKkB,wBAA2BD,EAAYX,GAAG,cCE5Ca,EARA,WACX,OACI,gCACI,uCAAY,uBAAGC,KAAK,4BAA4BC,OAAS,SAASC,IAAI,uBAA1D,aCUTC,MAVf,YAAsE,IAAvDC,EAAsD,EAAtDA,YAAad,EAAyC,EAAzCA,aAAeO,EAA0B,EAA1BA,WAAYjB,EAAc,EAAdA,YACrD,OACE,yBAAKC,UAAY,aACf,kBAAC,EAAD,CAAQQ,UAAae,EAAad,aAAgBA,EAAcV,YAAeA,IAC/E,kBAAC,EAAD,CAAQiB,WAAcA,EAAYjB,YAAeA,IACjD,kBAAC,EAAD,Q,sBC6BSyB,MAhCf,WAAgB,IAAD,EACUC,mBCRR,+qCDOF,mBACNC,EADM,KACDC,EADC,KAuBb,OACE,kBAAC,EAAD,CACAJ,YAAeG,EACfjB,aAvBiB,SAAAmB,GACjB,IAAMF,EAAOE,EAAER,OAAOP,MACtBc,EAAQD,IAsBRV,WAPO,CAAEa,OADOC,IAAOJ,EALL,CAChBK,UAAS,EACTC,QAAS,EACTC,KAAM,KAWRlC,YApBmB,SAAC6B,GACPA,EAAER,OAAOc,WAAWA,WAC5BC,UAAUC,OAAO,cELNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.392f5682.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f4648208.png\";","import React from \"react\";\r\nimport logo from \"../logo.png\"\r\n\r\nconst Header = ({headerText,handleClick}) => {\r\n    return(\r\n        <header>\r\n            <div className = \"container_logo\" >\r\n                <img src={logo} alt=\"Icon\"/>\r\n            </div>\r\n        <h1>{headerText}</h1>\r\n        <i className=\"fa fa-arrows-alt\" aria-hidden=\"true\" id=\"expand-icon\" onClick = {handleClick} ></i>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header'\r\n\r\nconst Editor = ({innerText,handleChange,handleClick}) => {\r\n    return (\r\n        <div className = \"container_frame\" id=\"container__editor\">\r\n            <Header headerText = \"Editor\" handleClick = {handleClick}/>\r\n            <textarea name=\"editor\" id=\"editor\" cols=\"30\" rows=\"10\" value = {innerText} onChange = {handleChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor;","import React from 'react';\r\nimport Header from './Header'\r\n\r\n\r\nconst Screen = ({textResult,handleClick}) => {\r\n    return (\r\n        <div className = \"container_frame\" id=\"container__screen\" >\r\n            <Header headerText = \"Previewer\" handleClick = {handleClick}/>\r\n            <div dangerouslySetInnerHTML = {textResult} id=\"preview\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Screen;","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Coded by <a href=\"https://github.com/dg0397\" target = \"_blank\" rel=\"noopener noreferrer\">DG0397</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Editor from './Editor';\r\nimport Screen from './Screen';\r\nimport Footer from './Footer'\r\n\r\nfunction Main({textContent ,handleChange , textResult, handleClick}) {\r\n  return (\r\n    <div className = \"container\" >\r\n      <Editor innerText = {textContent} handleChange = {handleChange} handleClick = {handleClick} />\r\n      <Screen textResult = {textResult} handleClick = {handleClick} />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React, {useState} from 'react';\nimport Main from './Components/Main';\nimport marked from 'marked';\nimport \"./Styles/styles.scss\";\nimport {data} from \"./data\";\n\n\nfunction App() {\n  const [text,setText] = useState(data);\n\n  const handleText = e  => {\n    const text = e.target.value;\n    setText(text);\n  }\n\n  const expandScreen = (e) => {\n    const node = e.target.parentNode.parentNode \n    node.classList.toggle('active')\n  }\n\n  const getMarkdownText = () => {\n    const objConfig = {\n      sanatize:true,\n      breaks : true,\n      gfm : true\n    }\n    var rawMarkup = marked(text, objConfig);\n    return { __html: rawMarkup };\n  }\n\n  return (\n    <Main \n    textContent = {text}\n    handleChange = {handleText} \n    textResult = {getMarkdownText()}\n    handleClick = {expandScreen}/>\n  );\n}\n\nexport default App;\n","export const data = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}